rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuth() { 
      return request.auth != null; 
    }

    function getUserRole() {
      return isAuth() 
        ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role
        : null;
    }

    function isSuperAdmin() { 
      return getUserRole() == 'superadmin'; 
    }

    function onlyChanges(allowedFields) {
      return request.resource.data.diff(resource.data).changedKeys().hasOnly(allowedFields);
    }

    match /users/{userId} {
      allow read: if isAuth();

      allow create: if isSuperAdmin();

      allow update: if isSuperAdmin() || 
                       (isAuth() && 
                        request.auth.uid == userId && 
                        onlyChanges(['displayName', 'email', 'firstName', 'lastName', 'photoURL']));

      allow delete: if isSuperAdmin();
    }

    match /orders/{orderId} {
      allow read: if isAuth();

      allow create: if isAuth();

      allow update: if isAuth() && 
        resource.data.status == 'pending' &&
        isAuth() && request.auth.uid == resource.data.requesterUid &&
        onlyChanges([
          'items', 'total', 'totalAmount', 'date', 
          'requesterName', 'updatedAt'
        ]);

      allow update: if isAuth() && 
        resource.data.status == 'pending' &&
        onlyChanges([
          'status', 'approvedBy', 'approvedAt', 'approvedByUid',
          'rejectedReason', 'rejectedAt', 'rejectedByUid',
          'updatedAt', 'timestamps'
        ]);

      allow update: if isAuth() && 
        onlyChanges([
          'status', 'procurementStatus', 'procurementNote',
          'itemsCategories', 'itemsStatuses', 'items',
          'expectedDate', 'deliveredDate', 'trackingNumber',
          'vendorId', 'vendorName', 'poNumber',
          'timestamps', 'updatedAt'
        ]);

      allow delete: if isSuperAdmin();
    }

    match /notifications/{notificationId} {
      function isRecipient() {
        let userRecipient = {'type': 'user', 'id': request.auth.uid};
        let roleRecipient = {'type': 'role', 'id': getUserRole()};
        return resource.data.recipients.hasAny([userRecipient, roleRecipient]);
      }

      function isNotExpired() {
        return !('expiresAt' in resource.data) || 
               resource.data.expiresAt > request.time;
      }

      allow read: if isSuperAdmin() ||
                     (isAuth() && isRecipient() && isNotExpired());

      allow create: if isAuth() && 
                       request.resource.data.fromUserUid == request.auth.uid &&
                       request.resource.data.recipients is list &&
                       request.resource.data.recipients.size() > 0 &&
                       request.resource.data.readBy is list &&
                       request.resource.data.title is string &&
                       request.resource.data.message is string &&
                       request.resource.data.orderId is string &&
                       request.resource.data.orderNo is number &&
                       request.resource.data.kind is string;

      allow update: if isAuth() && 
                       isRecipient() &&
                       onlyChanges(['readBy', 'updatedAt']) &&
                       request.resource.data.readBy.hasAll(resource.data.readBy) &&
                       request.resource.data.readBy.hasAny([request.auth.uid]);

      allow delete: if isSuperAdmin() || 
                       ('expiresAt' in resource.data && resource.data.expiresAt < request.time);
    }

    match /counters/{counterId} {
      allow read: if isAuth();
      allow write: if isAuth();
    }

    match /categories/{categoryId} {
      allow read: if isAuth();
      allow write: if isSuperAdmin();
    }

    match /suppliers/{supplierId} {
      allow read: if isAuth();
      allow write: if isSuperAdmin();
    }

    match /departments/{departmentId} {
      allow read: if isAuth();
      allow write: if isSuperAdmin();
    }

    match /itemCategories/{itemCategoryId} {
      allow read: if isAuth();
      allow write: if isSuperAdmin();
    }

    match /itemStatuses/{itemStatusId} {
      allow read: if isAuth();
      allow write: if isSuperAdmin();
    }

    match /procurementData/{procurementId} {
      allow read: if isAuth();
      allow write: if isSuperAdmin();
    }

    match /logs/{logId} {
      allow read: if isSuperAdmin();
      allow write: if isAuth();
    }

    match /settings/{settingId} {
      allow read: if isAuth();
      allow write: if isSuperAdmin();
    }

    match /reports/{reportId} {
      allow read: if isAuth();
      allow write: if isSuperAdmin();
    }

    match /templates/{templateId} {
      allow read: if isAuth();
      allow write: if isSuperAdmin();
    }

    match /attachments/{attachmentId} {
      allow read: if isAuth();
      allow write: if isAuth();
    }

    match /debug/{debugId} {
      allow read: if isSuperAdmin();
      allow write: if isSuperAdmin();
    }

    match /system/{systemId} {
      allow read: if isSuperAdmin();
      allow write: if isSuperAdmin();
    }

    match /backup/{backupId} {
      allow read: if isSuperAdmin();
      allow write: if isSuperAdmin();
    }

    match /audit/{auditId} {
      allow read: if isSuperAdmin();
      allow write: if isAuth();
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}